#!/usr/bin/env bash
set -euo pipefail

REPO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OUT_DIR="$REPO_DIR/out"

build() {
  mkdir -p "$OUT_DIR"
  javac -d "$OUT_DIR" "$REPO_DIR"/src/duck/*.java
}

run_java() {
  java -cp "$OUT_DIR" duck.DuckCli "$@"
}

install_hooks() {
  build
  HOOK_DIR="$REPO_DIR/.git/hooks"
  mkdir -p "$HOOK_DIR"
  cat > "$HOOK_DIR/post-commit" <<'EOS'
#!/usr/bin/env bash
set -e
REPO_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
# 同リポジトリの duck があれば refresh 実行（静かに失敗許容）
if [ -x "$REPO_DIR/duck" ]; then
  "$REPO_DIR/duck" refresh >/dev/null 2>&1 || true
fi
EOS
  chmod +x "$HOOK_DIR/post-commit"
  echo "Installed .git/hooks/post-commit"
  echo "Done."
}

case "${1-}" in
  install)
    install_hooks
    ;;
  refresh)
    [ -d "$OUT_DIR" ] || build
    run_java refresh
    ;;
  status)
    [ -d "$OUT_DIR" ] || build
    run_java status
    ;;
  help|"")
    echo "duck install | status | refresh | help"
    ;;
  *)
    echo "unknown subcommand: $1"
    echo "try: duck help"
    exit 1
    ;;
esac
